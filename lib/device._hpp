/*#ifndef __DEVICE_H
#define __DEVICE_H
#include <string>
#include <stdexcept>
#include <iostream>
#include <fstream>
#include <boost/asio.hpp>
#include <boost/bind/bind.hpp>
#include <boost/asio/serial_port.hpp>
#include <boost/algorithm/string.hpp>


constexpr int argument_size { 6 };
const int buffer_size { 1000000 };

class Device 
{
public:
    Device(std::string configstr, int _timeout);
    void execute();
private:
    void parse_args(std::string& configstr);
    void wait_callback(boost::asio::serial_port& ser_port, const boost::system::error_code& error);
    void read_callback(bool& data_available, size_t& size, boost::asio::deadline_timer& timeout, const boost::system::error_code& error, std::size_t bytes_transferred);
    bool read_data(char* data, size_t& size);
    void tick(const boost::system::error_code& e);

    /* timer specific attributes */
    
    boost::asio::deadline_timer timer {io_service};
    int timeout {0};
    std::string device_name { "" };
    
    /* state machine - states enum */
    enum class states
    {
        stop,
        transmission_idle,
        transmission_started,
        waiting_for_data_timer_start,
        waiting_for_data_timer_ended,
        transmission_ongoing,
        transmission_ended,
        write_file
    };
    /* dcurrent state machine state */
    states current_state { states::stop };

    /* attributes regarding serial port */
    std::string port_name { "" };

    char buffer[buffer_size];
};

#endif /* __DEVICE_H */